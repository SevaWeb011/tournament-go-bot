import os
import time
import threading
from threading import Thread
import telebot
from telebot import types
import main


token = os.getenv("BOT")
bot = telebot.TeleBot(token)
state = "city_selection"
global listCity
listCity = []

@bot.message_handler(content_types=['text'])
def message(message):

    towns = types.ReplyKeyboardMarkup(resize_keyboard=True)

    navigation = types.ReplyKeyboardMarkup(resize_keyboard=True)
    nav1 = types.KeyboardButton('–¥–∞–ª–µ–µ')
    nav2 = types.KeyboardButton('—Å—Ç–æ–ø')
    navigation.add(nav1, nav2)

    state_user = "city_selection"

    users = [
        message.chat.id,
        message.chat.first_name,
        message.chat.last_name,
        message.chat.username,
        state_user
    ]

    main.query_users(users)

    SelectState = main.selectState(message.chat.id)

    if SelectState == "city_selection":

        all_city = sorted(set(main.get_all_cities()) - set(listCity))
        for city in all_city:
            towns.add(types.KeyboardButton(city))

        if message.text.lower() == "/start":
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ üèò, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—É—Ä–Ω–∏—Ä—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è —Ç–µ–±—è üòâ', reply_markup=towns)

        if message.html_text in all_city:
            main.add_city(message.chat.id, message.html_text)
            listCity.append(message.html_text)
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∂–º–∏ –î–ê–õ–ï–ï, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏ –°–¢–û–ü', reply_markup=navigation)

        if message.html_text == '–¥–∞–ª–µ–µ':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥', reply_markup=towns)
       
        if message.html_text == '—Å—Ç–æ–ø':
            main.query_change_state("main", message.chat.id)
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã, ' + message.chat.first_name, reply_markup=types.ReplyKeyboardRemove())
       

    if SelectState == "main":
        if message.text.lower() == "/start":
            bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ' + message.chat.first_name)
            return
       
        if message.text.lower() == "/tournaments":
            for tournament in main.all_tournaments():
                bot.send_message(message.chat.id, 'üèÜ \n' + tournament)
            return
        
        if message.text.lower() == "/weekend_tournaments":
            bot.send_message(message.chat.id, '–¢—É—Ä–Ω–∏—Ä—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ üëÄ ... \n\n' + main.weekend_tournaments())
            return

        if message.text.lower() == "/my_city":
            for city in main.my_city(message.chat.id):
                bot.send_message(message.chat.id, city)
            return
        
        if message.text.lower() == "/tournaments_in_my_city":
           for tournament in main.all_tournaments_in_city(message.chat.id):
                bot.send_message(message.chat.id, 'üèÜ \n' + tournament)
           return

        if message.text.lower() == "/message_to_developer":
            main.query_change_state("message_to_developer", message.chat.id)
            SelectState = main.selectState(message.chat.id)
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–∞—Ö, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö, –∏ —Ç–ø. –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É')
            return

        if message.text.lower() == "/change_city":
            main.remove_city_for_user(message.chat.id)
            main.query_change_state("city_selection", message.chat.id)
            SelectState = main.selectState(message.chat.id)
            bot.send_message(message.chat.id, '–Ø –æ—á–∏—Å—Ç–∏–ª —Ç–≤–æ–∏ –≥–æ—Ä–æ–¥–∞, –≤—ã–±–∏—Ä–∞–π –Ω–æ–≤—ã–µ', reply_markup=towns)
            return

        else: 
            bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ :(')
        
    if SelectState == "message_to_developer" and message.text.lower() != "/message_to_developer":
        bot.send_message(925936432, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + message.chat.first_name + " " +  message.chat.username + "\n" + message.html_text)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏–ª")
        main.query_change_state("main", message.chat.id)
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /message_to_developer')

def push_message():
    # –µ—Å–ª–∏ –≤—ã–±–æ—Ä–∫–∞ city –∏–∑ —Ç–∞–±–ª–∏—Ü—ã NEW_tournament_go 
# –µ—Å—Ç—å (in) –≤ –≤—ã–±–æ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã UserCity 
# —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ UserCity 
# (–≤—ã–±—Ä–∞—Ç—å id_user –≥–¥–µ city = city –∏–∑ —Ç–∞–±–ª–∏—Ü—ã NEW_tournament_go) 
# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–º—É id —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ
    for city in main.all_cities_from_new_tournaments():
        if city in main.user_cities():
            for user in main.id_user_where_city_in_NEW():
                all_tournaments = main.all_tournaments_in_city_NEW(user[0])
                for tournament in all_tournaments:
                    result = main.Select_message_was_send(user[0], tournament[0])
                    if len(result) == 0:
                        bot.send_message(user[0], "–í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ—è–≤–∏–ª—Å—è —Ç—É—Ä–Ω–∏—Ä \n" + tournament[1])
                        main.message_was_send(user[0], tournament[0])

def background():#test
    while True:
        main.download_page("https://gofederation.ru/tournaments/", "current.html"),  # —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–µ—Ä–Ω–∏—Ä–æ–≤
        main.compare("current.html", "old.html"),  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        main.copy_current_to_old("old.html", "current.html"),  # –∑–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –Ω–∞ –Ω–æ–≤–æ–µ
        main.main_NEW(),  # –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        push_message(),  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
        main.delete_all_from_NEW(),  # —É–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ –Ω–æ–≤—ã—Ö
        main.del_message_was_send(),  # –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        main.main(),  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        main.delete_old_tournaments()  # —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ –¥–∞—Ç–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã

        time.sleep(60)
    

if __name__ == '__main__':

    t1 = Thread(target=background, args=())
    t1.start()
    
    bot.polling()